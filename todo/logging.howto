
Logging in libntfs
==================

1. What is it?
--------------

centralised logging system
Logging provides meaningful error messages.
There is only so much information that you can communicate using numbers.

A shared library, such as libntfs, cannot simply write mesages to stdout.
stdout may not exist, for example in a GUI application


two ways of graphical app:
        spawn and trap stdout
        link and call directly

debugging, want printfs without using printf

problems
quiet library
error handling

2. How?
-------

how to extend logging
override
macros

3. Definitions.
---------------

special log-reason and log-perror (no \n)

#include "logging.h"

/* Function prototype for the logging handlers */
typedef int (ntfs_log_handler)(const char *function, const char *file, int line,
        u32 level, void *data, const char *format, va_list args);

/* Set the logging handler from one of the functions, below. */
void ntfs_log_set_handler(ntfs_log_handler *handler);

/* Logging handlers */
ntfs_log_handler ntfs_log_handler_fprintf __attribute__((format(printf, 6, 0)));
ntfs_log_handler ntfs_log_handler_null    __attribute__((format(printf, 6, 0)));
ntfs_log_handler ntfs_log_handler_stdout  __attribute__((format(printf, 6, 0)));
ntfs_log_handler ntfs_log_handler_outerr  __attribute__((format(printf, 6, 0)));
ntfs_log_handler ntfs_log_handler_stderr  __attribute__((format(printf, 6, 0)));

/* Enable/disable certain log levels */
u32 ntfs_log_set_levels(u32 levels);
u32 ntfs_log_clear_levels(u32 levels);
u32 ntfs_log_get_levels(void);

/* Enable/disable certain log flags */
u32 ntfs_log_set_flags(u32 flags);
u32 ntfs_log_clear_flags(u32 flags);
u32 ntfs_log_get_flags(void);

/* Turn command-line options into logging flags */
BOOL ntfs_log_parse_option(const char *option);
        if (strcmp(option, "--log-debug") == 0) {
                ntfs_log_set_levels(NTFS_LOG_LEVEL_DEBUG);
                return TRUE;
        } else if (strcmp(option, "--log-verbose") == 0) {
                ntfs_log_set_levels(NTFS_LOG_LEVEL_VERBOSE);
                return TRUE;
        } else if (strcmp(option, "--log-quiet") == 0) {
                ntfs_log_clear_levels(NTFS_LOG_LEVEL_QUIET);
                return TRUE;
        } else if (strcmp(option, "--log-trace") == 0) {
                ntfs_log_set_levels(NTFS_LOG_LEVEL_TRACE);
                return TRUE;
        } else if ((strcmp(option, "--log-colour") == 0) ||
                   (strcmp(option, "--log-color") == 0)) {
                ntfs_log_set_flags(NTFS_LOG_FLAG_COLOUR);
                return TRUE;

int ntfs_log_redirect(const char *function, const char *file, int line,
        u32 level, void *data, const char *format, ...)
        __attribute__((format(printf, 6, 7)));

/* Logging levels - Determine what gets logged */
#define NTFS_LOG_LEVEL_DEBUG    (1 <<  0) /* x = 42 */
#define NTFS_LOG_LEVEL_TRACE    (1 <<  1) /* Entering function x() */
#define NTFS_LOG_LEVEL_QUIET    (1 <<  2) /* Quietable output */
#define NTFS_LOG_LEVEL_INFO     (1 <<  3) /* Volume needs defragmenting */
#define NTFS_LOG_LEVEL_VERBOSE  (1 <<  4) /* Forced to continue */
#define NTFS_LOG_LEVEL_PROGRESS (1 <<  5) /* 54% complete */
#define NTFS_LOG_LEVEL_WARNING  (1 <<  6) /* You should backup before starting */
#define NTFS_LOG_LEVEL_ERROR    (1 <<  7) /* Operation failed, no damage done */
#define NTFS_LOG_LEVEL_PERROR   (1 <<  8) /* Message : standard error description */
#define NTFS_LOG_LEVEL_CRITICAL (1 <<  9) /* Operation failed,damage may have occurred */
#define NTFS_LOG_LEVEL_REASON   (1 << 10) /* Human readable reason for failure */

/* Logging style flags - Manage the style of the output */
#define NTFS_LOG_FLAG_PREFIX    (1 << 0) /* Prefix messages with "ERROR: ", etc */
#define NTFS_LOG_FLAG_FILENAME  (1 << 1) /* Show the file origin of the message */
#define NTFS_LOG_FLAG_LINE      (1 << 2) /* Show the line number of the message */
#define NTFS_LOG_FLAG_FUNCTION  (1 << 3) /* Show the function name containing the message */
#define NTFS_LOG_FLAG_ONLYNAME  (1 << 4) /* Only display the filename, not the pathname */
#define NTFS_LOG_FLAG_COLOUR    (1 << 5) /* Colour highlight some messages */

        const char *prefix;

        switch (level) {
                case NTFS_LOG_LEVEL_DEBUG:
                        prefix = "DEBUG: ";
                        break;
                case NTFS_LOG_LEVEL_TRACE:
                        prefix = "TRACE: ";
                        break;
                case NTFS_LOG_LEVEL_QUIET:
                        prefix = "QUIET: ";
                        break;
                case NTFS_LOG_LEVEL_INFO:
                        prefix = "INFO: ";
                        break;
                case NTFS_LOG_LEVEL_VERBOSE:
                        prefix = "VERBOSE: ";
                        break;
                case NTFS_LOG_LEVEL_PROGRESS:
                        prefix = "PROGRESS: ";
                        break;
                case NTFS_LOG_LEVEL_WARNING:
                        prefix = "WARNING: ";
                        break;
                case NTFS_LOG_LEVEL_ERROR:
                        prefix = "ERROR: ";
                        break;
                case NTFS_LOG_LEVEL_PERROR:
                        prefix = "ERROR: ";
                        break;
                case NTFS_LOG_LEVEL_CRITICAL:
                        prefix = "CRITICAL: ";
                        break;
                default:
                        prefix = "";
                        break;

/* Macros to simplify logging.  One for each level defined above.
 * Note, if NTFS_DISABLE_DEBUG_LOGGING is defined, then ntfs_log_debug/trace have no effect.
 */
#define ntfs_log_critical(FORMAT, ARGS...) ntfs_log_redirect(__FUNCTION__,__FILE__,__LINE__,NTFS_LOG_LEVEL_CRITICAL,NULL,FORMAT,##ARGS)
        ntfs_log_error
        ntfs_log_info
        ntfs_log_perror
        ntfs_log_progress
        ntfs_log_quiet
        ntfs_log_verbose
        ntfs_log_warning
        ntfs_log_reason

/* By default debug and trace messages are compiled into the program,
 * but not displayed.
 */
#ifdef NTFS_DISABLE_DEBUG_LOGGING
        ntfs_log_debug
        ntfs_log_trace

/**
 * ntfs_log_handler_fprintf - Basic logging handler
 * @function:   Function in which the log line occurred
 * @file:       File in which the log line occurred
 * @line:       Line number on which the log line occurred
 * @level:      Level at which the line is logged
 * @data:       User specified data, possibly specific to a handler
 * @format:     printf-style formatting string
 * @args:       Arguments to be formatted
 *
 * A simple logging handler.  This is where the log line is finally displayed.
 * It is more likely that you will want to set the handler to either
 * ntfs_log_handler_outerr or ntfs_log_handler_stderr.
 *
 * Note: For this handler, @data is a pointer to a FILE output stream.
 *       If @data is NULL, nothing will be displayed.
 *
 * Returns:  -1  Error occurred
 *            0  Message wasn't logged
 *          num  Number of output characters
 */
int ntfs_log_handler_fprintf(const char *function, const char *file,
        int line, u32 level, void *data, const char *format, va_list args)
{
        const int reason_size = 128;
        static char *reason = NULL;
        int ret = 0;
        int olderr = errno;
        FILE *stream;
        const char *col_prefix = NULL;
        const char *col_suffix = NULL;

        if (!data)              /* Interpret data as a FILE stream. */
                return 0;       /* If it's NULL, we can't do anything. */
        stream = (FILE*)data;

        if (level == NTFS_LOG_LEVEL_REASON) {
                if (!reason)
                        reason = malloc(reason_size);
                if (reason) {
                        memset(reason, 0, reason_size);
                        return vsnprintf(reason, reason_size, format, args);
                } else {
                        /* Rather than call ourselves, just drop through */
                        level = NTFS_LOG_LEVEL_PERROR;
                        format = "Couldn't create reason";
                        args = NULL;
                        olderr = errno;
                }
        }

        if (ntfs_log.flags & NTFS_LOG_FLAG_COLOUR) {
                /* Pick a colour determined by the log level */
                switch (level) {
                        case NTFS_LOG_LEVEL_DEBUG:
                                col_prefix = col_green;
                                col_suffix = col_end;
                                break;
                        case NTFS_LOG_LEVEL_TRACE:
                                col_prefix = col_cyan;
                                col_suffix = col_end;
                                break;
                        case NTFS_LOG_LEVEL_WARNING:
                                col_prefix = col_yellow;
                                col_suffix = col_end;
                                break;
                        case NTFS_LOG_LEVEL_ERROR:
                        case NTFS_LOG_LEVEL_PERROR:
                                col_prefix = col_red;
                                col_suffix = col_end;
                                break;
                        case NTFS_LOG_LEVEL_CRITICAL:
                                col_prefix = col_redinv;
                                col_suffix = col_end;
                                break;
                }
        }

        if (col_prefix)
                ret += fprintf(stream, col_prefix);

        if ((ntfs_log.flags & NTFS_LOG_FLAG_ONLYNAME) &&
            (strchr(file, PATH_SEP)))           /* Abbreviate the filename */
                file = strrchr(file, PATH_SEP) + 1;

        if (ntfs_log.flags & NTFS_LOG_FLAG_PREFIX)      /* Prefix the output */
                ret += fprintf(stream, "%s", ntfs_log_get_prefix(level));

        if (ntfs_log.flags & NTFS_LOG_FLAG_FILENAME)    /* Source filename */
                ret += fprintf(stream, "%s ", file);

        if (ntfs_log.flags & NTFS_LOG_FLAG_LINE)        /* Source line number */
                ret += fprintf(stream, "(%d) ", line);

        if ((ntfs_log.flags & NTFS_LOG_FLAG_FUNCTION) || /* Source function */
            (level & NTFS_LOG_LEVEL_TRACE))
                ret += fprintf(stream, "%s(): ", function);

        ret += vfprintf(stream, format, args);

        if (level & NTFS_LOG_LEVEL_PERROR) {
                if (reason)
                        ret += fprintf(stream, " : %s\n", reason);
                else
                        ret += fprintf(stream, " : %s\n", strerror(olderr));
        }

        if (col_suffix)
                ret += fprintf(stream, col_suffix);


        fflush(stream);
        errno = olderr;
        return ret;
}

If you have any questions, please send them to the linux-ntfs development
mailing list:

    linux-ntfs-dev@lists.sourceforge.net

Cheers,
    FlatCap (Rich)
    1 November 2005

